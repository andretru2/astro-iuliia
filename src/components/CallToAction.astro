---
import CopyToClipboard from "@components/CopyToClipboard.astro";
import { Icon } from "astro-icon";

export interface Props {
  href?: string;
  copyToClipboard?: boolean;
  primary?: boolean;
}

const { href, copyToClipboard = false, primary = true } = Astro.props as Props;
---

{copyToClipboard && <CopyToClipboard />}

<!-- <div class="flex items-center justify-center bg-slate-50"></div>
<div class="space-x-5">
  <button
    class="relative overflow-hidden rounded-sm shadow-md shadow-gray-400/50 bg-gradient-to-r from-blue-400 to-cyan-400 py-3 px-5 text-lg font-medium uppercase tracking-wider text-gray-50"
    >button</button
  >
  <button
    class="relative overflow-hidden rounded-sm shadow-md shadow-gray-400/50 bg-gradient-to-r from-indigo-400 to-cyan-400 py-3 px-5 text-lg font-medium uppercase tracking-wider text-gray-50"
    >button</button
  >
</div> -->

<!-- <a
  href={href}
  class:list={[
    `px-12 py-4 text-white bg-[#2555FF] text-lg sm:text-xl font-regular sm:font-semibold cursor-pointer  hover:ring-offset-2 hover:ring-2 hover:ring-primary`,
  ]}
>
  <slot />
</a> -->

<a
  href={href}
  class:list={[
    `ripple px-12 py-4 rounded-md text-white bg-[#345ae8] text-lg sm:text-xl font-regular sm:font-semibold cursor-pointer  `,
  ]}
  ><slot />
</a>

<!-- <button class="ripple">Button</button> -->

<style>
  /* Ripple effect */
  .ripple {
    background-position: center;
    transition: background 0.8s;
  }
  .ripple:hover {
    background: #47a7f5 radial-gradient(circle, transparent 1%, #47a7f5 1%)
      center/15000%;
  }
  .ripple:active {
    background-color: #6eb9f7;
    background-size: 100%;
    transition: background 0s;
  }

  /* Button style */
  /* button {
    border: none;
    border-radius: 2px;
    padding: 12px 18px;
    font-size: 16px;
    text-transform: uppercase;
    cursor: pointer;
    color: white;
    background-color: #2196f3;
    box-shadow: 0 0 4px #999;
    outline: none;
  } */
</style>

<!-- <script>
  const buttons = document.querySelectorAll("button");
  buttons.forEach((btn) => {
    btn.addEventListener("click", function (e) {
      const x = e.clientX - this.offsetLeft;
      const y = e.clientY - this.offsetTop;
      const ripples = document.createElement("span");
      ripples.className =
        `left-[${x}px] top-[${y}px]` +
        " absolute bg-white -translate-x-1/2 -translate-y-1/2 rounded-full animate-ripple";
      this.appendChild(ripples);
      setTimeout(() => ripples.remove(), 1000);
    });
  });
</script> -->
