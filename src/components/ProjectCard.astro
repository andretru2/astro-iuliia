---
import type { Project } from "@src/types.js";
import { Image } from "@astrojs/image/components";
import Chip from "@components/Chip.astro";
import { Sprite } from "astro-icon";

export interface Props {
  key: string;
  project: Project; //its not Project[] as im not expecting an array! just expecting one project.
  reverse?: boolean;
}

const { key, project, reverse = true } = Astro.props as Props;
// const margin = alternate ? "ml-auto" : "mr-auto";
// const margin = "m-auto";
// const maxHeight = "max-h-[41rem]";
// const maxHeight = "min-h-screen";
// const bg = project.background.src;
// const bg = "#aaa";
---

<article id={key} class:list={[" relative isolate max-w-7xl rounded"]}>
  <a
    hidden={project.disabled}
    class="absolute inset-0 z-10"
    href={project.url?.href}
    target="_self"
  >
    <span class="sr-only">Learn more about {project.title}</span>
  </a>

  <div class:list={["card tilt preserve3d grid grid-flow-row gap-8"]}>
    <div
      class="flex py-10 px-8 items-center justify-center w-full shadow-xl rounded-sm bg-slate-50"
    >
      <video
        class:list={["video preserve3d sm:max-h-[40rem] "]}
        autoplay
        loop
      >
        <source src={project.image.src} type="video/mp4" />
      </video>
    </div>

    <div class:list={[" flex flex-col mt-4 "]}>
      <h1
        class="title preserve3d font-syne text-4xl text-gray-900 font-bold line-clamp-3  h-fit pb-4"
      >
        {project.title}
      </h1>
      <ol class="flex flex-row gap-2 tag preserve3d pt-1">
        {
          project.tags.map((tag) => {
            return (
              <li>
                <Chip tag={tag as string} />
              </li>
            );
          })
        }
      </ol>
      <p class="pt-6 description preserve3d prose prose-md">
        {project.description}
      </p>

      <button
        disabled={project.disabled}
        class:list={[
          " rounded-sm mt-6 grow-0 text-lg w-max px-7 py-2 text-white bg-designsystem-500 hover:bg-slate-200",
          project.disabled ? "cursor-none bg-gray-200 text-gray-900" : "",
        ]}
        >View Case
        <Sprite class="inline" pack="ic" name="round-arrow-forward" size={24} />
      </button>
    </div>
  </div>
</article>

<style>
  :has(.preserve3d) {
    transform-style: preserve-3d;
  }

  .card {
    /* background-image: var(--bg); */
    background-size: 120%;
  }

  .tilt {
    perspective: 1000px;
    /* transition: transform 600ms cubic-bezier(0.23, 1, 0.32, 1); */
  }

  .tilt:hover {
    transition: none;
  }

  .videox {
    clip-path: path(
      "
      M597.324 129V723C597.157 835.167 596.824 1072.3 596.824 1123.5C596.824 1207 538.824 1237 488.824 1231.5H127.324C29.8263 1236.5 -2.674 1192.5 1.3239 1106V111.5C1.3239 39 32.8239 1 118.824 1H493.324C581.826 4.5 597.324 58 597.324 129Z"
    );
    width: 100%;
    height: 100%;
    object-fit: scale-down;
  }
</style>

<script define:vars={{ key }}>
  const article = document.getElementById(key);
  const card = article.querySelector(".card");
  const video = article.querySelector(".video");
  const title = article.querySelector(".title");
  const tag = article.querySelector(".tag");
  const description = article.querySelector(".description");

  video.playbackRate = 0.5;

  article?.addEventListener("mousemove", (e) => {
    let x = (window.innerWidth / 2 - e.pageX) / 90;
    let y = (window.innerHeight / 2 - e.pageY) / 180;
    // x = 3;
    // console.log(window.innerHeight / 2 - e.pageY);
    // card.style.transition = "all 300ms ease-in";
    card.style.transform = `rotateY(${x}deg) rotateX(${y}deg) scale3d(1, 1, 1)`;
  });

  article?.addEventListener("mouseenter", (e) => {
    card.style.transition = "none";
    // article.style.transform = "rotate(45deg)";
    // video.style.transform = "translateZ(45px) ";
    // title.style.transform = "translateZ(90px)";
    // tag.style.transform = "translateZ(60px)";
    // description.style.transform = "translateZ(60px)";
  });

  article?.addEventListener("mouseleave", (e) => {
    card.style.transition = "all 800ms ease-out";
    card.style.transform = "rotateY(0deg) rotateX(0deg)";
    // video.style.transform = "translateZ(0px)";
    // title.style.transform = "translateZ(0px)";
    // tag.style.transform = "translateZ(0px)";
    // description.style.transform = "translateZ(0px)";
  });
</script>
